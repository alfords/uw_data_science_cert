ir
ir <- GET("https://api.impactradius.com/Advertisers/IRaUZtAZPNXY138761bi8EoAdJGmBYQnv1/Actions.json?CampaignId=3327&ActionDateStart=2015-07-01T00:00:00-08:00&ActionDateEnd=2015-09-30T00:00:00-08:00",
authenticate("IRaUZtAZPNXY138761bi8EoAdJGmBYQnv1","G2h6xykFgmuw5xs3PPWSLjiUe7B8X5EC"))
ir
ir$url
ir$times
ir$content
ir$cookies
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
# Q4
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
library(caret)
View(vowel.train)
model_fit_rf <- train(y ~ .,
data = vowel.train,
method = "rf")
confusionMatrix(vowel.test$y, predict(model_fit_rf, newdata = vowel.test))
predict(model_fit_rf, newdata = vowel.test)
vowel.test$y
confusionMatrix(vowel.test$y, predict(model_fit_rf, newdata = vowel.test))
predict(model_fit_rf, newdata = vowel.test)
confusionMatrix(vowel.test$y, predict(model_fit_rf, newdata = vowel.test))
confusionMatrix(vowel.test$y, predict(model_fit_rf, newdata = vowel.test))
nrow(vowel.test$y)
length(vowel.test$y)
length(predict(model_fit_rf, newdata = vowel.test))
round(predict(model_fit_rf, newdata = vowel.test))
predict_rf <- round(predict(model_fit_rf, newdata = vowel.test))
confusionMatrix(vowel.test$y, predict_rf)
vowel.train$y <- as.factor(vowel.train$y)
model_fit_rf <- train(y ~ .,
data = vowel.train,
method = "rf")
predict(model_fit_rf, newdata = vowel.test)
confusionMatrix(as.factor(vowel.test$y), predict(model_fit_rf, newdata = vowel.test))
model_fit_gbm <- train(y ~ .,
data = vowel.train,
method = "gbm")
confusionMatrix(as.factor(vowel.test$y), predict(model_fit_gbm, newdata = vowel.test))
set.seed(33833)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
model_fit_rf <- train(y ~ .,
data = vowel.train,
method = "rf")
set.seed(33833)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
model_fit_rf <- train(y ~ .,
data = vowel.train,
method = "rf")
confusionMatrix(as.factor(vowel.test$y), predict(model_fit_rf, newdata = vowel.test))
model_fit_gbm <- train(y ~ .,
data = vowel.train,
method = "gbm",
verbose = FALSE)
confusionMatrix(as.factor(vowel.test$y), predict(model_fit_gbm, newdata = vowel.test))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
View(training)
set.seed(233)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(training)
model_fit <- train(ComprehensiveStrength ~.,
data = training,
method = "lasso")
names(training)
model_fit <- train(CompressiveStrength ~.,
data = training,
method = "lasso")
set.seed(233)
model_fit <- train(CompressiveStrength ~.,
data = training,
method = "lasso")
names(training)
plot.enet(model_fit, xvar = c("Cement","BlastFurnaceSlag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age"))
plot.enet(model_fit, xvar = c("Cement"))#,"BlastFurnaceSlag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age"))
plot.enet(model_fit, xvar = c("penalty"))#,"BlastFurnaceSlag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age"))
model_fit$results
model_fit$metric
model_fit$finalModel
plot.enet(model_fit$finalModel)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(training)
model_fit <- svm(CompressiveStrength ~ .,
data = training)
set.seed(325)
library(e1071)
model_fit <- svm(CompressiveStrength ~ .,
data = training)
model_fit$fitted
predict(model_fit,testing)
model_predict <- predict(model_fit,testing)
attr(model_predict)
attr(model_predict,"decision.values")
model_fit$fitted
model_fit$terms
confusionMatrix(testing$CompressiveStrength, model_predict)
summary(model_fit)
error <- testing$CoarseAggregate - model_predict
rsme(error)
RMSE(error)
RMSE(model_predict)
RMSE(model_predict, testing$CompressiveStrength)
setwd(choose.dir())
mtcars
mtcars[2:7]
mtcars[,2:7]
mtcars[2:7,]
mtcars[,2:7]
corr(mtcars,mtcars)
cor(mtcars,mtcars)
source('~/- OneDrive -/allAttributes/OD_allAttributes.R', echo=TRUE)
library(RODBC)
conn <- odbcDriverConnect(connection_string)
allAttributes <- sqlQuery(conn, sql_query)
close(conn)
source('~/- OneDrive -/allAttributes/OD_allAttributes.R', echo=TRUE)
## Run SQL Query
conn <- odbcDriverConnect(connection_string)
allAttributes <- sqlQuery(conn, sql_query)
close(conn)
source('~/- OneDrive -/allAttributes/OD_allAttributes.R', echo=TRUE)
View(allAttributes)
## set SQL query
sql_query <- "select * from timeSeries_agg_allAttributes_2015_09_01"
## Run SQL Query
conn <- odbcDriverConnect(connection_string)
allAttributes <- sqlQuery(conn, sql_query)
close(conn)
######
View(allAttributes)
table(allAttributes$userTenureInMonths)
hist(allAttributes$userTenureInMonths)
sum(allAttributes$userTenureInMonths)
lapply(allAttributes, class)
View(allAttributes)
sum(allAttributes$puid_count)
library(dplyr)
table(allAttributes$monthOfInterest)
library(Rserve)
Rserve()
library(Rserve)
Rserve()
library(Rserve)
Rserve()
close(conn)
library(RODBC)
close(conn)
124758079+22889638
##Load libraries
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(stringr)
rm(list=ls())
# Clear Console:
cat("\014")
3 + 5
exp(-1^2/2)/sqrt(2*pi)
x <- 2
y <- exp(-x^2/2)/sqrt(2*pi)
# Get values of variables
x
y
x <- -1:2
y <- 1:4
x
y
2*x^3
x+y
x*y
pi
e
exp
y <- exp(-x^2/2)/sqrt(2*pi)
x <- 2
y <- exp(-x^2/2)/sqrt(2*pi)
# Get values of variables
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
# Use the R console like a calculator
3 + 5
exp(-1^2/2)/sqrt(2*pi)
# assignment
x <- 2
y <- exp(-x^2/2)/sqrt(2*pi)
# Get values of variables
x
y
"Hello World" # The console will respond with "Hello World" if you run this string
hw <- "Hi World"
hw
# The most common data structure in R:  the vector
# here x is a scalar:
x <- -1
y <- exp(-x^2/2)/sqrt(2*pi)
x
y
# Ask R:  What is x?
is(x)
length(x)
# Some math with vectors
x <- -1:2
y <- 1:4
x
y
2*x^3
x+y
x*y
2*x^3
x+y
x*y
rm(list=ls())
cat("\014")
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"
# Download a rectangular dataset
DATAFRAME.obj<-read.csv(url, header=TRUE)
View(DATAFRAME.obj)
# present an overview of these data
# How many rows and columns are in the dataframe?
nrow(DATAFRAME.obj)
ncol(DATAFRAME.obj)
head(DATAFRAME.obj)
names(DATAFRAME.obj)
# What do these names mean?
# What are the stanrad deviation, mean, and median of each vector?
sd(DATAFRAME.obj)
is(DATAFRAME.obj)
sd(DATAFRAME.obj)
is(DATAFRAME.obj)
sd(DATAFRAME.obj[               , 1])
median(DATAFRAME.obj[, 1])
is(DATAFRAME.obj)
sapply(DATAFRAME.obj, is)
sapply(DATAFRAME.obj, length)
summary(DATAFRAME.obj)
# determine the standard deviation, mean, and median for each vector
sapply(DATAFRAME.obj, sd)
sapply(DATAFRAME.obj, mean)
sapply(DATAFRAME.obj, median)
sapply(DATAFRAME.obj, is)
lapply(DATAFRAME.obj,class)
lapply(DATAFRAME.obj,is)
lapply(DATAFRAME.obj,class)
# determine the standard deviation, mean, and median for each vector
sapply(DATAFRAME.obj, sd)
sapply(DATAFRAME.obj, mean)
sapply(DATAFRAME.obj, median)
lapply(DATAFRAME.obj,sd)
# determine the standard deviation, mean, and median for each vector
sapply(DATAFRAME.obj, sd)
vapply(DATAFRAME.obj, class)
names(DATAFRAME.obj) <- c("Recency", "Frequency", "Monetary", "Time", "whether")
head(DATAFRAME.obj)
View(DATAFRAME.obj)
a <- 5 + 3
a <- 5 + 3; a
a <- 5 + 3;
a <-1
a[3]<-3
a[2]
c(1, 2, 3) * c(1, 2, 3)
v <- c(1,2,3,4,5,6,7,8,"a")
v[9]*2
v[9]*2
v[8]*2
v[1]*2
library(Rserve)
Rserve()
library(Rserve)
Rserve()
df <- iris
library(dplyr)
library(ggplot2)
plotmatrix(df)
library(ggplot2)
plotmatrix(iris[,1:4], colour="gray20")
plotmatrix(iris[,1:4], colour="gray20")
pairs(df)
library(dplyr)
df <- iris
pairs(df)
petal_measures <- cbind(df$petal_width,df$petal_length)
pairs(df, col = df$Species)
petal_measures <- cbind(df$petal_width,df$petal_length)
kmeans(petal_measures,3)
library(dplyr)
df <- iris
pairs(df, col = df$Species)
petal_measures <- cbind(df$petal_width,df$petal_length)
df <- iris
pairs(df, col = df$Species)
petal_measures <- cbind(df$petal_width,df$petal_length)
kmeans(petal_measures,3)
petal_measures <- cbind(df$petal_width,df$petal_length)
petal_measures <- cbind(df$Petal.Width,df$Petal.Length)
kmeans(petal_measures,3)
df <- iris
pairs(df, col = df$Species)
petal_measures <- cbind(df$Petal.Width,df$Petal.Length)
kmeans(petal_measures,3)
install.packages("Rserve")
library(Rserve)
Rserve()
df <- iris
cor(df)
lapply(df, class)
df_numeric <- df[class(df)="numeric"]
df_numeric <- df[class(df)="numeric",]
df_numeric <- df[,class(df)="numeric"]
class(df)="numeric"
lapply(df, is.numeric)
df_numeric <- lapply(df, is.numeric)
df <- iris
df_numeric <- lapply(df, is.numeric)
df_numeric <- lapply(df, is.numeric)
df_numeric <- sapply(df, is.numeric)
df[is.numeric(),]
df[,is.numeric()]
df[,lapply(df, is.numeric)]
df_numeric <- df[,sapply(df, is.numeric)]
View(df_numeric)
df_numeric <- df[,lapply(df, is.numeric)]
View(df_numeric)
df_numeric <- df[,lapply(df, is.numeric)]
cor(df_numeric)
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 1,  0,  0,  1) # III
r4 <- c( 0,  1,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
b <- c(1,0,0.89,0.1)
A
b
B <- c(1,0,0.89,0.1)
x <- solve(A,B)
x
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 1,  0,  0,  1) # III
r4 <- c( 0,  1,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
# Add code here
B <- c(1,0,0.89,0.1)
# Solve the equation:
x <- solve(A,B)
x
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 100,  0,  0,  100) # III
r4 <- c( 0,  10,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
# Add code here
B <- c(1,0,89,1)
x <- solve(A,B)
x
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 100,  0,  0,  100) # III
r4 <- c( 0,  10,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
# Add code here
B <- c(1,0,89,1)
# Solve the equation:
x <- solve(A,B)
x
A
B
x
x[1]
x[1]/(x[1]+x[2])
##  Read the csv file into a data frame
read.auto <- function(path = 'SET-YOUR-PATH-HERE'){
## Function to read the csv file
filePath <- file.path(path, 'Automobile price data _Raw_.csv')
auto.price <- read.csv(filePath, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm',
'highway.mpg', 'city.mpg', 'compression.ratio',
'engine.size', 'curb.weight', 'height', 'width',
'length', 'wheel.base', 'normalized.losses',
'symboling')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
auto.price
}
Auto.Price = read.auto(path = '.') ## Read the csv file
## Create a simple scatter plot
require(ggplot2)
p1 = ggplot(Auto.Price, aes(city.mpg, price)) + geom_point()
## Use asthetics to highlight the data
## Use a larger point size
p1 + geom_point(aes(size = 2))
require(ggplot2)
p1 = ggplot(Auto.Price, aes(city.mpg, price)) + geom_point()
Auto.Price = read.auto(path = '.') ## Read the csv file
read.auto <- function(path = 'SET-YOUR-PATH-HERE'){
## Function to read the csv file
filePath <- file.path(path, 'Automobile price data _Raw_.csv')
auto.price <- read.csv(filePath, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm',
'highway.mpg', 'city.mpg', 'compression.ratio',
'engine.size', 'curb.weight', 'height', 'width',
'length', 'wheel.base', 'normalized.losses',
'symboling')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
auto.price
}
Auto.Price = read.auto(path = 'Automobile price data _Raw_.csv') ## Read the csv file
Auto.Price <- read.csv('Automobile price data _Raw_.csv')
Auto.Price <- read.csv("Automobile price data _Raw_.csv")
setwd(file.choose())
setwd(dir.choose())
setwd("C:/Users/jjensen/Dropbox/UW - Data Science Cert/2 - Methods for Data Analysis/Lecture1")
##  Read the csv file into a data frame
read.auto <- function(path = 'SET-YOUR-PATH-HERE'){
## Function to read the csv file
filePath <- file.path(path, 'Automobile price data _Raw_.csv')
auto.price <- read.csv(filePath, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm',
'highway.mpg', 'city.mpg', 'compression.ratio',
'engine.size', 'curb.weight', 'height', 'width',
'length', 'wheel.base', 'normalized.losses',
'symboling')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
auto.price
}
Auto.Price = read.auto(path = '.') ## Read the csv file
## Create a simple scatter plot
require(ggplot2)
p1 = ggplot(Auto.Price, aes(city.mpg, price)) + geom_point()
## Use a larger point size
p1 + geom_point(aes(size = 2))
p1 + geom_point(aes(size = 2, color = factor(aspiration)))
p1 + geom_point(aes(size = 2, color = factor(aspiration), alpha = 0.2))
p1 + geom_point(aes(size = 2, color = factor(aspiration), alpha = 0.2, shape = factor(fuel.type)))
## Scatter plot matrix
pairs(~ price + city.mpg + engine.size + curb.weight + length,
data=Auto.Price, main="Simple Scatterplot Matrix of Auto Data")
## Histogram with different bin types
require(gridExtra)
h = ggplot(Auto.Price, aes(price))
n = 19
bw = (max(Auto.Price$price, na.rm = TRUE) - min(Auto.Price$price, na.rm = TRUE))/n
title = paste('Histogram with', as.character(n), 'bins')
h1 = h + geom_histogram(binwidth = bw, na.rm = TRUE) + ggtitle(title)
n = 59
bw = (max(Auto.Price$price, na.rm = TRUE) - min(Auto.Price$price, na.rm = TRUE))/n
title = paste('Histogram with', as.character(n), 'bins')
h2 = h + geom_histogram(binwidth = bw, na.rm = TRUE) + ggtitle(title)
grid.arrange(h1, h2, nrow = 1) ## Plot the histograms
## Box plots of categorical variables
bp1 = ggplot(Auto.Price, aes(fuel.type, price)) + geom_boxplot(notch = TRUE)
bp2 = ggplot(Auto.Price, aes(body.style, price)) + geom_boxplot()
grid.arrange(bp1, bp2, nrow = 1) ## Plot the box plots
## Normal q-q plot
par(mfrow=c(1,2))
qqnorm(Auto.Price$price, main = 'Normal Q-Q Plot of price')
qqline(Auto.Price$price)
qqnorm(log(Auto.Price$price), main = 'Normal Q-Q Plot of log price')
qqline(log(Auto.Price$price))
par(mfrow=c(1,1))
h2 + facet_grid(. ~ aspiration)
h2 + facet_grid(fuel.type ~ aspiration)
p1 + facet_grid(. ~ aspiration)
c1 = p1 + facet_grid(fuel.type ~ aspiration)
c1
## Scatter plot with three conditioning variables
p1 + facet_grid(fuel.type ~ aspiration + drive.wheels)
c1 + geom_point(aes(color = factor(drive.wheels)))
