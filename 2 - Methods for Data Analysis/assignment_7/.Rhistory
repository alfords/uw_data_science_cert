minmaxpost <- function(theta, data){
mu <- theta[1]
sigma <- exp(theta[2])
dnorm(data$min, mu, sigma, log=TRUE) +
dnorm(data$max, mu, sigma, log=TRUE) +
(data$n - 2) * log(pnorm(data$max, mu, sigma) -
pnorm(data$min, mu, sigma))
}
# Some data and compute the posterior using the Laplace method
data <- list(n=10, min=52, max=84)
fit <- laplace(minmaxpost, c(70, 2), data)
fit
# Plot to see the sampling
mycontour(minmaxpost, c(45, 95, 1.5, 4), data,
xlab=expression(mu), ylab=expression(paste("log ",sigma)))
mycontour(lbinorm, c(45, 95, 1.5, 4),
list(m=fit$mode, v=fit$var), add=TRUE, col="red",
main = 'Contours of posterior with Normal approx in red')
mcmc.fit <- rwmetrop(minmaxpost,
list(var=fit$v, scale=3),
c(70, 2),
10000,
data)
mcmc.fit$accept  # What is the acceptance ratio
## Countour plot of the outcome
mycontour(minmaxpost, c(45, 95, 1.5, 4), data,
xlab=expression(mu),
ylab=expression(paste("log ",sigma)))
points(mcmc.fit$par)
## What does the distibution of one of our model parameters look like.
## Look at the distribution of the upper 75% quartile
mu <- mcmc.fit$par[, 1]
sigma <- exp(mcmc.fit$par[, 2])
P.75 <- mu + 0.674 * sigma
plot(density(P.75),
main="Posterior Density of Upper Quartile")
mycontour(minmaxpost, c(45, 95, 1.5, 4), data,
xlab=expression(mu),
ylab=expression(paste("log ",sigma)))
points(mcmc.fit$par)
mu <- mcmc.fit$par[, 1]
sigma <- exp(mcmc.fit$par[, 2])
P.75 <- mu + 0.674 * sigma
plot(density(P.75),
main="Posterior Density of Upper Quartile")
df <- iris
hist(iris$Sepal.Length)
df_z <- scale(df)
hist(scale(df$Sepal.Length))
dairy <- read_csv('CADairyProduction.csv')
# load libraries and set working drive
library(dplyr)
library(readr)
library(ggplot2)
setwd(choose.dir())
dairy <- read_csv('CADairyProduction.csv')
dairy <- read_csv('CADairyProduction.csv')
View(dairy)
View(dairy)
dairy %>% group_by(Year) %>% summarise(n)
dairy %>% group_by(Year) %>% summarise(n())
dairy %>% group_by(Year) %>% summarise(n()) %>% arrange(Year)
ts(dairy$Icecream.Prod, start = 1995, deltat = 1/12)
icecream <- ts(dairy$Icecream.Prod, start = 1995, deltat = 1/12)
icecream
icecream <- ts(dairy$Icecream.Prod, start = 1995, frequency = 12)
icecream
icecream <- ts(dairy$Icecream.Prod, start = 1995, deltat = 1/12)
icecream
icecream <- ts(dairy$Icecream.Prod, deltat = 1/12)
icecream
library(forecast)
plot(icecream)
icecream <- ts(dairy$Icecream.Prod, start = 1995, deltat = 1/12)
icecream
plot(icecream)
adf.test(icecream, alternative = 'stationary', k = 0)
library(tseries)
adf.test(icecream, alternative = 'stationary', k = 0)
library(tseries)
data("AirPassengers")
AirPassengers
adf.test(diff(log(AirPassengers)), alternative = "stationary", k=0)
adf.test(icecream, alternative = 'stationary', k = 0)
plot(icecream)
adf.test(icecream, alternative = 'stationary', k = 0)
plot(icecream)
plot(icecream)
plot(log(icecream))
par
par(2,1)
plot(icecream)
plot(log(icecream))
par(mfrow=c(2,1))
plot(icecream)
plot(log(icecream))
plot(icecream)
plot(icecream)
# look side by side with a log transform
par(mfrow=c(2,1))
plot(icecream)
plot(log(icecream))
# appears
plot(icecream)
par(mfrow=c(2,1))
plot(icecream)
plot(log(icecream))
# appears
plot(icecream)
# now look side by side with a log transform
par(mfrow=c(2,1))
plot(icecream)
plot(log(icecream))
acf(icecream)
par(mfrow=c(1,1))
acf(icecream)
# now look side by side with a log transform
par(mfrow=c(2,1))
plot(icecream)
plot(log(icecream))
par(mfrow=c(1,1))
plot(icecream)
adf.test(icecream, alternative = 'stationary', k = 0)
par(mfrow=c(2,1))
acf(icecream)
pacf(icecream)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers ~ time(AirPassengers)))
time(AirPassengers)
par(mfrow=c(1,1))
abline(reg=lm(icecream ~ time(icecream)))
par(mfrow=c(1,1))
plot(icecream)
abline(reg=lm(icecream ~ time(icecream)))
# now look side by side with a log transform
par(mfrow=c(2,1))
plot(icecream)
abline(reg=lm(icecream ~ time(icecream)))
plot(log(icecream))
abline(reg=lm(log(icecream) ~ time(icecream)))
par(mfrow=c(1,1))
# plot the ts
plot(icecream)
abline(reg=lm(icecream ~ time(icecream)))
time(icecream)
plot(diff(icecream))
abline(reg=lm(diff(icecream) ~ time(icecream)))
# use 1st order differencing
plot(diff(icecream))
abline(reg=lm(diff(icecream) ~ time(icecream)))
time(diff(icecream))
abline(reg=lm(diff(icecream) ~ time(diff(icecream)))
plot(diff(icecream))
plot(diff(icecream))
abline(reg=lm(diff(icecream) ~ time(diff(icecream)))
)
icecream
diff(icecream)
adf.test(diff(icecream), alternative = 'stationary', k = 0)
acf(diff(icecream))
par(mfrow=c(2,1))
acf(diff(icecream))
pacf(diff(icecream))
par(mfrow=c(1,1))
www = "http://staff.elena.aut.ac.nz/Paul-Cowpertwait/ts/cbe.dat"
CBE = read.table(www, header = TRUE)
head(CBE)
elec.ts = ts(CBE[,3], start = 1958, freq = 12)
beer.ts = ts(CBE[,2], start = 1958, freq = 12)
lnbeer.ts = ts(log(CBE[,2]), start = 1958, freq = 12)
choclate.ts = ts(CBE[,1], start = 1958, freq = 12)
aus.ts = cbind(elec.ts, beer.ts, lnbeer.ts, choclate.ts)
plot(aus.ts)
beer.arima = ts.model(aus.ts[,'beer.ts'], col = 'ARIMA model for beer', order = c(1,1,1))
beer.arima = ts.model(aus.ts[,'beer.ts'], col = 'ARIMA model for beer', order = c(2,1,1))
plot.acf(beer.arima$resid[-1], col = 'beer ARIMA model result', is.df = F)
dist.ts(beer.arima$resid[-1])
vec = 1:365  # A vector of values
class(vec) # Vector is an atomic class in R
## Create a ts class object from the vector
## by adding time series attributes
vec.ts = ts(vec, start = 1990, freq = 365)
class(vec.ts)  # Check the class
vec = 1:365  # A vector of values
class(vec) # Vector is an atomic class in R
## Create a ts class object from the vector
## by adding time series attributes
vec.ts = ts(vec, start = 1990, freq = 365)
class(vec.ts)  # Check the class
attributes(vec.ts) # Note the time series attributes
plot(vec.ts) # Note the x-axis is the time attribute
plot.acf <- function(df, col = 'remainder', is.df =TRUE){
if(is.df) temp <- df[, col]
else temp <- df
par(mfrow = c(2,1))
acf(temp, main = paste('ACF of', col))
pacf(temp, main = paste('PACF of', col))
par(mfrow = c(1,1))
}
dist.ts = function(df, col = 'residual', bins = 40){
par(mfrow = c(1,2))
temp = as.vector(df)
breaks = seq(min(temp), max(temp), length.out = (bins + 1))
hist(temp, breaks = breaks, main = paste('Distribution of ', col), xlab = col)
qqnorm(temp, main = paste('Normal Q-Q plot of ', col))
par(mfrow = c(1,1))
}
## Investigate the time series properties of white noise
ts.white = function(n, mean = 0.0, sd = 1.0, start = 1990, freq = 12){
ts(rnorm(n, mean = mean, sd = sd), start = start, freq = 12)
}
white = ts.white(300)
plot(white, main = 'White noise time series')
dist.ts(white, col = 'white noise')
plot.acf(white, col = 'white noise', is.df = F)
ran.walk = function(n, freq = 12, start = 1990, sd = 1.0, mean = 0.0){
norms = rnorm(n, mean = mean, sd = sd)
ts(cumsum(norms), start = start, freq = 12)
}
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
dist.ts(ranWalk, col = 'random walk')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
ranWalk = ran.walk(300)
plot(ranWalk, main = 'Random walk time series')
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
r <- 0
r_t <- r
for (i in 1:100) {
r <- r + rnorm(1)
r_t <- c(r_t, r)
}
r_t
rnorm()
## ---- Investigate time series properties of
## trend + white noise
ts.trend = function(n, slope = 0.01, mean = 0.0, sd = 1.0, start = 1990, freq = 12){
temp = seq(0, slope * n, length.out = n) +
rnorm(n, mean = mean, sd = sd)
ts(temp, start = start, freq = 12)
}
trend = ts.trend(300, slope = 0.01)
plot(trend, main = 'Trend + white noise time series')
dist.ts(trend, col = 'trend + white noise')
plot.acf(trend, col = 'trend + white noise', is.df = F)
## --- Decomposition of the time series into components
ts.decomp <- function(df, col = 'elec.ts', span = 0.5, Mult = TRUE, is.df = TRUE){
# if(Mult) temp = log(df[, col])  else temp = ts(df[, col]
if(is.df) temp = log(df[, col])
else temp = df
spans = span * length(temp)
fit <- stl(temp, s.window = "periodic", t.window = spans)
plot(fit, main = paste('Decompositon of',col,'with lowess span = ', as.character(span)))
fit$time.series
}
temp = ts.decomp(trend, is.df = FALSE)
plot.acf(temp[,3], is.df = FALSE)
trend
temp = ts.decomp(trend, is.df = FALSE)
plot.acf(temp[,3], is.df = FALSE)
stl(icecream)
# read in data
dairy <- read_csv('CADairyProduction.csv')
# inspect time range & check 12 months per year
dairy %>% group_by(Year) %>% summarise(n()) %>% arrange(Year)
# create ts object
icecream <- ts(dairy$Icecream.Prod, start = 1995, deltat = 1/12)
icecream
stl(icecream)
stl(icecream, s.window = 'periodic')
icecream_decomp <- stl(icecream, s.window = 'periodic')
plot(icecream_decomp)
icecream_decomp$time.series
icecream_decomp$time.series$remainder
icecream_decomp$time.series[3]
icecream_decomp$time.series[,3]
icecream_decomp$time.series[,'remainder']
icecream_decomp$time.series[,'remainder']
icecream_decomp$time.series
# plot acf & pacf
acf_plots <- function(ts) {
par(mfrow=c(2,1))
acf(ts)
pacf(ts)
par(mfrow=c(1,1))
}
acf_plots(icecream)
names(icecream)
# plot acf & pacf
acf_plots <- function(ts) {
par(mfrow=c(2,1))
acf(ts, main = "ACF")
pacf(ts, main = "PACF")
par(mfrow=c(1,1))
}
acf_plots(icecream)
## ---- Simple ARMA models ------
## Simulate an ARMA process
arma.sim = function(ar = c(0.9), ma = c(0), n = 300, mean = 1.0){
ar1.model = list(ar = ar, ma = ma)
print(ar1.model)
ar1 = mean + arima.sim(model = ar1.model, n = n)
ar1
}
## Function for ARIMA model estimation
ts.model = function(ts, col = 'remainder', order = c(0,0,1)){
mod = arima(ts, order = order, include.mean = FALSE)
print(mod)
mod
}
arMod = arma.sim()
plot(arMod, main = 'Plot of AR(1) model time series')
plot.acf(arMod, col = 'AR(1) model', is.df = F)
mod.est = ts.model(arMod, col = 'AR(1) process', order = c(1,0,0))
plot.acf(mod.est$resid[-1], col = 'AR(1) estimate', is.df = F)
## --- MA(1) process
arMod = arma.sim(ar = c(0.001), ma = (0.9))
plot(arMod, main = 'Plot of MA(1) model time series')
plot.acf(arMod, col = 'MA(1) model', is.df = F)
mod.est = ts.model(arMod, col = 'MA(1) process', order = c(0,0,1))
plot.acf(mod.est$resid[-1], col = 'MA(1) estimate', is.df = F)
arMod = arma.sim(ar = c(0.9), ma = (0.9))
plot(arMod, main = 'Plot of ARMA(1,1) model time series')
plot.acf(arMod, col = 'ARMA(1,1) model', is.df = F)
mod.est = ts.model(arMod, col = 'ARMA(1,1) process', order = c(1,0,1))
plot.acf(mod.est$resid[-1], col = 'ARMA(1,1) estimate', is.df = F)
plot(icecream_decomp)
fit_arma <- arima(icecream_decomp$time.series[,'remainder'], order = c(1,0,0))
acf_plots(fit_arma$residuals)
fit_arma <- arima(icecream_decomp$time.series[,'remainder'], order = c(0,0,1))
acf_plots(fit_arma$residuals)
fit_arma <- arima(icecream_decomp$time.series[,'remainder'], order = c(0,0,1))
acf_plots(fit_arma$residuals)
fit_arma <- arima(icecream_decomp$time.series[,'remainder'], order = c(1,0,0))
acf_plots(fit_arma$residuals)
fit_arma <- arima(icecream_decomp$time.series[,'remainder'], order = c(0,0,1))
acf_plots(fit_arma$residuals)
fit_arma$residuals
fit_arma$residuals[-1]
acf_plots(fit_arma$residuals[-1])
fit_arma <- arima(icecream_decomp$time.series[,'remainder'], order = c(1,0,0))
acf_plots(fit_arma$residuals[-1])
# AR(1)
fit_arma10 <- arima(icecream_decomp$time.series[,'remainder'], order = c(1,0,0))
acf_plots(fit_arma10$residuals[-1])
# not a good fit
# MA(1)
fit_arma01 <- arima(icecream_decomp$time.series[,'remainder'], order = c(0,0,1))
acf_plots(fit_arma01$residuals)
# AR(1)
fit_arma10 <- arima(icecream_decomp$time.series[,'remainder'], order = c(1,0,0))
acf_plots(fit_arma10$residuals[-1])
# not a good fit
# MA(1)
fit_arma01 <- arima(icecream_decomp$time.series[,'remainder'], order = c(0,0,1))
acf_plots(fit_arma01$residuals)
fit_arma11 <- arima(icecream_decomp$time.series[,'remainder'], order = c(0,0,1))
acf_plots(fit_arma11$residuals)
acf_plots(fit_arma01$residuals[-1])
acf_plots(fit_arma10$residuals[-1])
acf_plots(fit_arma01$residuals[-1])
acf_plots(fit_arma11$residuals[-1])
# AR(1)
fit_arma10 <- arima(icecream_decomp$time.series[,'remainder'], order = c(1,0,0))
acf_plots(fit_arma10$residuals[-1])
# not a good fit
# MA(1)
fit_arma01 <- arima(icecream_decomp$time.series[,'remainder'], order = c(0,0,1))
acf_plots(fit_arma01$residuals[-1])
# not a good fit
# ARMA(1,1)
fit_arma11 <- arima(icecream_decomp$time.series[,'remainder'], order = c(1,0,1))
acf_plots(fit_arma11$residuals[-1])
a <- arima(icecream_decomp$time.series[,'remainder'], order = c(2,0,1))
acf_plots(a$residuals)
a <- arima(icecream_decomp$time.series[,'remainder'], order = c(2,0,2))
acf_plots(a$residuals)
a <- arima(icecream_decomp$time.series[,'remainder'], order = c(1,0,2))
acf_plots(a$residuals)
auto.arima(icecream_decomp$time.series[,'remainder'],
max.p = 5, max.d = 0, max.q = 5)
auto.arima(icecream_decomp$time.series[,'remainder'],
max.p = 5, max.d = 0, max.q = 5,
max.order = 5, seasonal = FALSE)
# bring in the big guns
fit_arma <- auto.arima(icecream_decomp$time.series[,'remainder'],
max.p = 5, max.d = 0, max.q = 5,
max.order = 5, seasonal = FALSE)
acf_plots(fit_arma$residuals[-1])
blah <- stl(icecream, s.window = 'periodic')
plot(blah)
summary(fit_arma)
blah <- stl(icecream, s.window = 'periodic')
plot(blah)
blah <- stl(diff(icecream), s.window = 'periodic')
plot(blah)
blah <- stl(diff(log(icecream)), s.window = 'periodic')
plot(blah)
blah <- stl(log(icecream), s.window = 'periodic')
plot(blah)
blah <- stl(diff(log(icecream)), s.window = 'periodic')
plot(blah)
adf.test(diff(log(icecream)), alternative = 'stationary', k = 0)
fit_arima <- auto.arima(temp, max.p=3, max.q=3,
max.P=2, max.Q=2, max.order=5,
max.d=2, max.D=1, start.p=0,
start.q=0, start.P=0, start.Q=0)
summary(fit_arima)
fit_arima <- auto.arima(icecream, max.p=3, max.q=3,
max.P=2, max.Q=2, max.order=5,
max.d=2, max.D=1, start.p=0,
start.q=0, start.P=0, start.Q=0)
summary(fit_arima)
acf_plots(fit_arima$residuals[-1])
fit_arima <- auto.arima(log(icecream), max.p=3, max.q=3,
max.P=2, max.Q=2, max.order=5,
max.d=2, max.D=1, start.p=0,
start.q=0, start.P=0, start.Q=0)
summary(fit_arima)
acf_plots(fit_arima$residuals[-1])
acf_plots(fit_arima$residuals[-1])
View(dairy)
dairy %>% group_by(Year) %>% summarise(sd = sd(Icecream.Prod))
icecream_year_sd <- dairy %>% group_by(Year) %>% summarise(sd = sd(Icecream.Prod))
plot(icecream_year_sd)
icecream_year_sd <- dairy %>% group_by(Year) %>% summarise(annual_sd = sd(Icecream.Prod))
plot(icecream_year_sd)
icecream_year_sd
icecream_forecast <- forecast(fit_arima, h=12)
summary(icecream_forecast)
plot(icecream_forecast)
fit_arima <- auto.arima(icecream, max.p=3, max.q=3,
max.P=2, max.Q=2, max.order=5,
max.d=2, max.D=1, start.p=0,
start.q=0, start.P=0, start.Q=0)
summary(fit_arima)
acf_plots(fit_arima$residuals[-1])
icecream_forecast <- forecast(fit_arima, h=12)
summary(icecream_forecast)
plot(icecream_forecast)
icecream_year_sd <- dairy %>% group_by(Year) %>% summarise(annual_sd = sd(Icecream.Prod))
icecream_year_sd
plot(icecream_year_sd)
adf.test(icecream, alternative = 'stationary', k = 0)
adf.test(diff(icecream), alternative = 'stationary', k = 0)
acf_plots(icecream)
summary(fit_arma)
fit_arma <- auto.arima(icecream_decomp$time.series[,'remainder'],
max.p = 5, max.d = 0, max.q = 5,
max.order = 5, seasonal = FALSE)
summary(fit_arma)
fit_arma <- auto.arima(icecream_decomp$time.series[,'remainder'],
max.p = 5, max.d = 0, max.q = 5,
max.order = 5, seasonal = FALSE, stepwise = FALSE)
summary(fit_arma)
acf_plots(fit_arma$residuals[-1])
adf.test(icecream, alternative = 'stationary')
adf.test(icecream, alternative = 'stationary')
adf.test(icecream_decomp$time.series[,'remainder'], alternative = 'stationary')
adf.test(icecream_decomp$time.series[,'trend'], alternative = 'stationary')
# lets inspect standard deviation by year
# if heteroskedasticity exists, then we should see a trend in the standard deviation
icecream_year_sd <- dairy %>% group_by(Year) %>% summarise(annual_sd = sd(Icecream.Prod)) %>% arrange(Year)
icecream_year_sd
plot(icecream_year_sd)
# anamoly exists in 2006-2009, but no overall trend
acf_plots(icecream)
data("AirPassengers")
AirPassengers
plot(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
aggregate(icecream,FUN=sd)
plot(aggregate(icecream,FUN=sd))
summary(icecream_forecast)
summary(fit_arima)
plot(icecream_decomp)
plot(icecream_decomp)
plot(aggregate(icecream, FUN = sd))
aggregate(icecream, FUN = sd)
summary(fit_arima)
