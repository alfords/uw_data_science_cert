# note: since Monty Hall will never reveal the car, a switching strategy will win as long as the car was not behind the original choice
df$switch_win <- ifelse(df$door_choice != df$door_with_car, T, F)
df
}
# run with 1M observations
df <- simMontyHall(1000000)
#
### Summarize Results
#
# create & print summary df
summary_df <- summarise(df, stay_prob = mean(stay_win),
stay_var = var(stay_win),
switch_prob = mean(switch_win),
switch_var = var(switch_win))
melt(summary_df)
View(summary_df)
library(ggplot2)
mpg <- mtcars
library(ggplot2)
mpg <- mtcars
View(mpg)
mpg
df <- mpg
table(df$fl)
ggplot(df, aes(fl)) +
geom_bar()
geom_histogram()
ggplot(df, aes(fl)) +
geom_histogram()
ggplot(df, aes(fl)) +
geom_bar()
source('~/.active-rstudio-document', echo=TRUE)
## new feature columns.
require(HistData)
males = GaltonFamilies[GaltonFamilies$gender == 'male',]
males.ext = males[, c('mother', 'father', 'childHeight')]
males.ext = males[, c('mother', 'father', 'childHeight')]
males.ext[, c('mother.sqr', 'father.sqr', 'motherfather')] =
data.frame(males$mother^2, males$father^2,
males$mother * males$father)
R = males.ext[, c('father', 'mother',
'father.sqr', 'mother.sqr',
'motherfather')]
RSVD = svd(R) # The SVD
RSVD$v %*% t(RSVD$v)  # Is nearly diagonal
d = diag(RSVD$d)
d
RSVD$d
plot.sing(dInv)
dInv = diag(1/RSVD$d)
dInv
plot.sing(dInv)
plot.sing(dInv)
##--------------------------------------------
##
## Class: PCE 350 Data Science Methods Class
##
##---- Regression with R Part 2 ----
##
## ----- The SVD of the model -------
males.ext = males[, c('mother', 'father', 'childHeight')]
males.ext[, c('mother.sqr', 'father.sqr', 'motherfather')] =
data.frame(males$mother^2, males$father^2,
males$mother * males$father)
R = males.ext[, c('father', 'mother',
'father.sqr', 'mother.sqr',
'motherfather')]
RSVD = svd(R) # The SVD
RSVD$v %*% t(RSVD$v)  # Is nearly diagonal
# The diagonal matrix of singular values
d = diag(RSVD$d)
d
## Plot the singular vectors
plot.vec = function(u, n = 5){
par(mfrow = c(n,1))
par(mar=c(1,6,1,2))
for(i in 1:n){
barplot(u[,i])
abline(h = 0, lwd = 2, col = 'blue')
}
par(mfrow = c(1,1))
}
plot.vec(RSVD$u)
plot.vec(t(RSVD$v))
## Plot the singular values
plot.sing = function(u){
par(mar=c(5,5,5,5))
nrows = nrow(u)
d = rep(0,nrows)
for(i in 1:nrows) d[i] = u[i,i]
plot(1:nrows, d, col = 'red',
main = ('Singular values'),
xlab = 'Singular value order',
ylab = 'Singular value')
}
plot.sing(d)
## Compute the inverse the singular values
dInv = diag(1/RSVD$d)
dInv
plot.sing(dInv)
## Compute the model coeficients
b = pInv %*% as.matrix(males.ext$childHeight)
b
## Compute the inverse the singular values
dInv = diag(1/RSVD$d)
dInv
plot.sing(dInv)
## Compute the pseudo inverse
pInv = RSVD$v %*% t(dInv) %*% t(RSVD$u[, 1:5])
dim(pInv)
## Is the product I?
pInv %*% M
pInv %*% as.matrix(R)
## Compute the model coeficients
b = pInv %*% as.matrix(males.ext$childHeight)
b
dInv2 = dInv
dInv2[5,5] = 0.0
dInv2
pInv2 = RSVD$v %*% t(dInv2) %*% t(RSVD$u[, 1:5])
b2 = pInv2 %*% as.matrix(males.ext$childHeight)
b2
## Use the 4 dimensional pseudo inverse
## Have a look at the residuals
males.ext$pred = as.matrix(R) %*% b2
males.ext$resid = males.ext$pred - males.ext$childHeight
plot.diagnostic = function(df){
## Plot the histogram and Q-Q of the residuals
par(mfrow = c(1,2))
hist(df$resid,
main = 'Histogram of residuals',
xlab = 'Model residuals')
qqnorm(df$resid)
par(mfrow = c(1,1))
## Plot the residuals vs the predicted values
require(ggplot2)
ggplot(df, aes(pred, resid)) +
geom_point(size = 2, alpha = 0.3) +
ggtitle('Residuals vs predicted value') +
xlab('Predicted values') + ylab('Residual')
}
plot.diagnostic(males.ext)
d
dReg = diag(RSVD$d + 10)
dReg
dInvReg = diag(1/(RSVD$d + 10))
dInvReg
pInvReg = RSVD$v %*% t(dInvReg) %*% t(RSVD$u[, 1:5])
bReg = pInvReg %*% as.matrix(males.ext$childHeight)
bReg
males.ext$pred = as.matrix(R) %*% bReg
males.ext$resid = males.ext$pred - males.ext$childHeight
plot.diagnostic(males.ext)
#
### Set up
#
# load libraries and set working drive
library(dplyr)
library(readr)
library(ggplot2)
library(GGally)
setwd(choose.dir())
# read in data
auto_prices <- read_csv('Automobile price data _Raw_.csv', na = c('','?'))
#
### Cleaning
#
# rename columns
colnames(auto_prices) <- gsub('-','_', colnames(auto_prices))
# create log price
auto_prices$log_price <- log(auto_prices$price)
# subset down to columns of interest
# make, fuel_type, aspiration, body_style, drive_wheels, length, curb_weight, engine_type, num_of_cylinders, engine_size, city_mpg
vars <- c("make", "fuel_type", "aspiration", "body_style", "drive_wheels", "length", "curb_weight", "engine_type", "num_of_cylinders", "engine_size", "city_mpg")
auto_prices <- select(auto_prices, log_price, one_of(vars))
# inspection of structure
str(auto_prices)
# inspect number of dimensions in data frame
ncol(auto_prices)
# note 11 features and 1 outcome measure
# create model matrix
auto_prices_matrix <- model.matrix(log_price ~ . , auto_prices)
head(auto_prices_matrix)
# inspect number of dimensions in matrix
ncol(auto_prices_matrix)
# note 45 orthogonal features and 1 outcome measure (not included)
# inspect number of dimensions in data frame
ncol(auto_prices)
# note 11 features and 1 outcome measure
# create model matrix
auto_prices_matrix <- model.matrix(log_price ~ . , auto_prices)
head(auto_prices_matrix)
# inspect number of dimensions in matrix
ncol(auto_prices_matrix)
# note 45 orthogonal features and 1 outcome measure (not included)
auto_prices <- read_csv('Automobile price data _Raw_.csv', na = c('','?'))
#
### Cleaning
#
# rename columns
colnames(auto_prices) <- gsub('-','_', colnames(auto_prices))
# create log price
auto_prices$log_price <- log(auto_prices$price)
# subset down to columns of interest
# make, fuel_type, aspiration, body_style, drive_wheels, length, curb_weight, engine_type, num_of_cylinders, engine_size, city_mpg
vars <- c("make", "fuel_type", "aspiration", "body_style", "drive_wheels", "length", "curb_weight", "engine_type", "num_of_cylinders", "engine_size", "city_mpg")
auto_prices <- select(auto_prices, log_price, one_of(vars))
# inspection of structure
str(auto_prices)
#
### create model matrix
#
# inspect number of dimensions in data frame
ncol(auto_prices)
# note 11 features and 1 outcome measure
# create model matrix
auto_prices_matrix <- model.matrix(log_price ~ . , auto_prices)
head(auto_prices_matrix)
# inspect number of dimensions in matrix
ncol(auto_prices_matrix)
# note 45 orthogonal features and 1 outcome measure (not included)
auto_prices <- read_csv('Automobile price data _Raw_.csv', na = c('','?'))
setwd(choose.dir())
auto_prices <- read_csv('Automobile price data _Raw_.csv', na = c('','?'))
#
### Cleaning
#
# rename columns
colnames(auto_prices) <- gsub('-','_', colnames(auto_prices))
# create log price
auto_prices$log_price <- log(auto_prices$price)
# subset down to columns of interest
# make, fuel_type, aspiration, body_style, drive_wheels, length, curb_weight, engine_type, num_of_cylinders, engine_size, city_mpg
vars <- c("make", "fuel_type", "aspiration", "body_style", "drive_wheels", "length", "curb_weight", "engine_type", "num_of_cylinders", "engine_size", "city_mpg")
auto_prices <- select(auto_prices, log_price, one_of(vars))
# inspection of structure
str(auto_prices)
#
### create model matrix
#
# inspect number of dimensions in data frame
ncol(auto_prices)
# note 11 features and 1 outcome measure
# create model matrix
auto_prices_matrix <- model.matrix(log_price ~ . , auto_prices)
head(auto_prices_matrix)
# inspect number of dimensions in matrix
ncol(auto_prices_matrix)
# note 45 orthogonal features and 1 outcome measure (not included)
males.ext = males[, c('mother', 'father', 'childHeight')]
males.ext[, c('mother.sqr', 'father.sqr', 'motherfather')] =
data.frame(males$mother^2, males$father^2,
males$mother * males$father)
R = males.ext[, c('father', 'mother',
'father.sqr', 'mother.sqr',
'motherfather')]
# read in data
auto_prices <- read_csv('Automobile price data _Raw_.csv', na = c('','?'))
#
### Cleaning
#
# rename columns
colnames(auto_prices) <- gsub('-','_', colnames(auto_prices))
# create log price
auto_prices$log_price <- log(auto_prices$price)
# subset down to columns of interest
# make, fuel_type, aspiration, body_style, drive_wheels, length, curb_weight, engine_type, num_of_cylinders, engine_size, city_mpg
vars <- c("make", "fuel_type", "aspiration", "body_style", "drive_wheels", "length", "curb_weight", "engine_type", "num_of_cylinders", "engine_size", "city_mpg")
auto_prices <- select(auto_prices, log_price, one_of(vars))
auto_prices <- na.omit(auto_prices)
str(auto_prices)
ncol(auto_prices)
auto_prices_matrix <- model.matrix(log_price ~ . , auto_prices)
head(auto_prices_matrix)
ncol(auto_prices_matrix)
install.packages("pls")
library(pls)
set.seed(16)
pcr_fit <- pcr(log_price ~ ., data=auto_prices, scale=T)
summary(pcr)
summary(pcr_fit)
validationplot(pcr_fit)
males.ext = males[, c('mother', 'father', 'childHeight')]
males.ext[, c('mother.sqr', 'father.sqr', 'motherfather')] =
data.frame(males$mother^2,
males$father^2,
males$mother * males$father)
R = males.ext[, c('father',
'mother',
'father.sqr',
'mother.sqr',
'motherfather')]
RSVD = svd(R) # The SVD
RSVD$v %*% t(RSVD$v)  # Is nearly diagonal
# The diagonal matrix of singular values
d = diag(RSVD$d)
d
RSVD$u[, 1:5] %*% d %*% t(RSVD$v)
M = RSVD$u[, 1:5] %*% d %*% t(RSVD$v)
dim(M)
head(R - M) ## Check the matrices are almost the same
dInv = diag(1/RSVD$d)
dInv
plot.sing(dInv)
pInv = RSVD$v %*% t(dInv) %*% t(RSVD$u[, 1:5])
dim(pInv)
RSVD$d
dInv
pInv = RSVD$v %*% t(dInv) %*% t(RSVD$u[, 1:5])
dim(pInv)
RSVD$v %*% t(dInv) %*% t(RSVD$u[, 1:5])
pInv %*% M
pInv %*% as.matrix(R)
as.matrix(males.ext$childHeight)
b = pInv %*% as.matrix(males.ext$childHeight)
b
#
### Cleaning
#
# rename columns
colnames(auto_prices) <- gsub('-','_', colnames(auto_prices))
# create log price
auto_prices$log_price <- log(auto_prices$price)
# subset down to columns of interest
# make, fuel_type, aspiration, body_style, drive_wheels, length, curb_weight, engine_type, num_of_cylinders, engine_size, city_mpg
vars <- c("make", "fuel_type", "aspiration", "body_style", "drive_wheels", "length", "curb_weight", "engine_type", "num_of_cylinders", "engine_size", "city_mpg")
auto_prices <- select(auto_prices, log_price, one_of(vars))
# note svd requires fully balanced data set, so lets remove na's
auto_prices <- na.omit(auto_prices)
# inspection of structure
str(auto_prices)
#
### create model matrix
#
# inspect number of dimensions in data frame
ncol(auto_prices)
# note 11 features and 1 outcome measure
# create model matrix
auto_prices_matrix <- model.matrix(log_price ~ . , auto_prices)
head(auto_prices_matrix)
# inspect number of dimensions in matrix
ncol(auto_prices_matrix)
# note 45 orthogonal features and 1 outcome measure (not included)
# inspect number of dimensions in data frame
ncol(auto_prices)
# note 11 features and 1 outcome measure
# create model matrix
ap_matrix <- model.matrix(log_price ~ . , auto_prices)
head(ap_matrix)
# inspect number of dimensions in matrix
ncol(ap_matrix)
# note 45 orthogonal features and 1 outcome measure (not included)
ap_svd <- svd(ap_matrix)
ap_svd
d_inverse <- diag(1/ap_svd$d)
d_inverse
head(d_inverse)
1/ap_svd$d
p_inverse <- ap_svd$v %*% t(d_inverse) %*% t(ap_svd$u)
dim(p_inverse)
dim(ap_matrix)
dim(auto_prices)
p_inverse %*% (ap_svd$u %*% diag(ap_svd$d) %*% t(ap_svd$v))
ap_coef <-  p_inverse %*% as.matrix(auto_prices$log_price)
ap_coef
d_inverse
dInv2 = dInv
dInv2[5,5] = 0.0
dInv2
pInv2 = RSVD$v %*% t(dInv2) %*% t(RSVD$u[, 1:5])
b2 = pInv2 %*% as.matrix(males.ext$childHeight)
b2
dInv3 = dInv2
dInv3[4,4] = 0.0
dInv3
pInv3 = RSVD$v %*% t(dInv3) %*% t(RSVD$u[, 1:5])
b3 = pInv3 %*% as.matrix(males.ext$childHeight)
b3
males.ext$resid = males.ext$pred - males.ext$childHeight
males.ext$pred = as.matrix(R) %*% b2
males.ext$resid = males.ext$pred - males.ext$childHeight
dInv
dInv3[4,4] = 0.0
dInv3
1/ap_svd$d
ifelse(1/ap_svd$d > 0.5, 0, 1/ap_svd$d)
d_reduced <- ifelse(1/ap_svd$d > 0.5, 0, 1/ap_svd$d)
d_inverse2 <- diag(d_reduced)
d_inverse2
head(d_inverse2)
d_inverse2
d_reduced[d_reduced > 0]
length(d_reduced[d_reduced > 0])
psuedo_inverse2 <- ap_svd$v %*% t(d_inverse2) %*% t(ap_svd$u)
dim(psuedo_inverse2)
ap_coef2 <- psuedo_inverse2 %*% as.matrix(auto_prices$log_price)
ap_coef2
psuedo_inverse2
t(d_inverse2)
psuedo_inverse2 <- ap_svd$v %*% t(d_inverse2) %*% t(ap_svd$u)
dim(psuedo_inverse2)
ap_coef2 <- psuedo_inverse2 %*% as.matrix(auto_prices$log_price)
ap_coef2
ap_matrix %*% ap_coef2
auto_prices$pred <- ap_matrix %*% ap_coef2
auto_prices$pred - auto_prices$log_price
auto_prices$resid <- auto_prices$pred - auto_prices$log_price
plot.diagnostic = function(df){
## Plot the histogram and Q-Q of the residuals
par(mfrow = c(1,2))
hist(df$resid,
main = 'Histogram of residuals',
xlab = 'Model residuals')
qqnorm(df$resid)
par(mfrow = c(1,1))
## Plot the residuals vs the predicted values
require(ggplot2)
ggplot(df, aes(pred, resid)) +
geom_point(size = 2, alpha = 0.3) +
ggtitle('Residuals vs predicted value') +
xlab('Predicted values') + ylab('Residual')
}
plot.diagnostic(auto_prices)
auto_prices$resid
auto_prices$resid^2
mean(auto_prices$resid^2)
sqrt(mean(auto_prices$resid^2))
rsme <- sqrt(mean(auto_prices$resid^2))
rsme
library(MASS)
require(HistData)
males = GaltonFamilies[GaltonFamilies$gender == 'male',]
males.ext = males[, c('mother', 'father', 'childHeight')]
males.ext[, c('mother.sqr', 'father.sqr', 'motherfather')] =
data.frame(males$mother^2, males$father^2,
males$mother * males$father)
## Compute a simple baseline model
lm.simple = lm(childHeight ~ mother + father, data = males.ext)
summary(lm.simple)
## Compute a model using all features
lm.males = lm(childHeight ~ ., data = males.ext)
summary(lm.males)
plot(lm.males)
library(MASS)
lm.step = stepAIC(lm.males, direction = 'both')
lm.step$anova # ANOVA of the result
summary(lm.step) # Summary of the best model
## Try again starting with a less over-determined model
lm.males = lm(childHeight ~ mother + father + father.sqr + mother.sqr, data = males.ext)
summary(lm.males)
ap_lm <- lm(log_price ~ ., data = auto_prices)
summary(ap_lm)
plot(ap_lm)
lm.step$anova # ANOVA of the result
stepAIC(ap_lm)
stepAIC(ap_lm, direction = 'both')
summary(lm.step)
plot(lm.step)
ap_lmstep <- stepAIC(ap_lm, direction = 'both')
summary(ap_lmstep)
plot(ap_lmstep)
summary(lm.simple)
anova(lm.males, lm.simple)
anova(lm.step, lm.simple)
anova(ap_lmstep, ap_lm)
auto_prices$pred <- NULL
auto_prices$resid <- NULL
auto_prices <- select(auto_prices, -pred, -resid)
# run diagnostics by looking at residuals
auto_prices$pred <- ap_matrix %*% ap_coef2
auto_prices$resid <- auto_prices$pred - auto_prices$log_price
auto_prices <- select(auto_prices, -pred, -resid)
auto_prices <- select(auto_prices, -pred, -resid)
auto_prices <- select(auto_prices, -pred)
library(dplyr)
auto_prices <- select(auto_prices, -pred, -resid)
auto_prices <- dplyr::select(auto_prices, -pred, -resid)
# run diagnostics by looking at residuals
auto_prices$pred <- ap_matrix %*% ap_coef2
auto_prices$resid <- auto_prices$pred - auto_prices$log_price
auto_prices <- dplyr::select(auto_prices, -pred, -resid)
# fit full model
ap_lm <- lm(log_price ~ ., data = auto_prices)
summary(ap_lm)
ap_lm <- lm(log_price ~ ., data = auto_prices)
summary(ap_lm)
plot(ap_lm)
library(MASS)
ap_lmstep <- stepAIC(ap_lm, direction = 'both')
summary(ap_lmstep)
plot(ap_lmstep)
anova(ap_lmstep, ap_lm)
rmse
rmse <- sqrt(mean(auto_prices$resid^2))
rmse
# calculate predicted and residual values
auto_prices$pred <- ap_matrix %*% ap_coef2
auto_prices$resid <- auto_prices$pred - auto_prices$log_price
rmse <- sqrt(mean(auto_prices$resid^2))
rmse
# drop pred & resid values
auto_prices <- dplyr::select(auto_prices, -pred, -resid)
# fit full model
ap_lm <- lm(log_price ~ ., data = auto_prices)
summary(ap_lm)
plot(ap_lm)
summary(ap_lmstep)
plot(ap_lmstep)
# compare with anova
anova(ap_lmstep, ap_lm)
blah <- lm(log_price ~ make, data = auto_prices)
anova(ap_lmstep, ap_lm, blah)
