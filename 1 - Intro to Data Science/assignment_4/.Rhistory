x <- 2
y <- exp(-x^2/2)/sqrt(2*pi)
# Get values of variables
x
y
x <- -1:2
y <- 1:4
x
y
2*x^3
x+y
x*y
pi
e
exp
y <- exp(-x^2/2)/sqrt(2*pi)
x <- 2
y <- exp(-x^2/2)/sqrt(2*pi)
# Get values of variables
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
# Use the R console like a calculator
3 + 5
exp(-1^2/2)/sqrt(2*pi)
# assignment
x <- 2
y <- exp(-x^2/2)/sqrt(2*pi)
# Get values of variables
x
y
"Hello World" # The console will respond with "Hello World" if you run this string
hw <- "Hi World"
hw
# The most common data structure in R:  the vector
# here x is a scalar:
x <- -1
y <- exp(-x^2/2)/sqrt(2*pi)
x
y
# Ask R:  What is x?
is(x)
length(x)
# Some math with vectors
x <- -1:2
y <- 1:4
x
y
2*x^3
x+y
x*y
2*x^3
x+y
x*y
rm(list=ls())
cat("\014")
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"
# Download a rectangular dataset
DATAFRAME.obj<-read.csv(url, header=TRUE)
View(DATAFRAME.obj)
# present an overview of these data
# How many rows and columns are in the dataframe?
nrow(DATAFRAME.obj)
ncol(DATAFRAME.obj)
head(DATAFRAME.obj)
names(DATAFRAME.obj)
# What do these names mean?
# What are the stanrad deviation, mean, and median of each vector?
sd(DATAFRAME.obj)
is(DATAFRAME.obj)
sd(DATAFRAME.obj)
is(DATAFRAME.obj)
sd(DATAFRAME.obj[               , 1])
median(DATAFRAME.obj[, 1])
is(DATAFRAME.obj)
sapply(DATAFRAME.obj, is)
sapply(DATAFRAME.obj, length)
summary(DATAFRAME.obj)
# determine the standard deviation, mean, and median for each vector
sapply(DATAFRAME.obj, sd)
sapply(DATAFRAME.obj, mean)
sapply(DATAFRAME.obj, median)
sapply(DATAFRAME.obj, is)
lapply(DATAFRAME.obj,class)
lapply(DATAFRAME.obj,is)
lapply(DATAFRAME.obj,class)
# determine the standard deviation, mean, and median for each vector
sapply(DATAFRAME.obj, sd)
sapply(DATAFRAME.obj, mean)
sapply(DATAFRAME.obj, median)
lapply(DATAFRAME.obj,sd)
# determine the standard deviation, mean, and median for each vector
sapply(DATAFRAME.obj, sd)
vapply(DATAFRAME.obj, class)
names(DATAFRAME.obj) <- c("Recency", "Frequency", "Monetary", "Time", "whether")
head(DATAFRAME.obj)
View(DATAFRAME.obj)
a <- 5 + 3
a <- 5 + 3; a
a <- 5 + 3;
a <-1
a[3]<-3
a[2]
c(1, 2, 3) * c(1, 2, 3)
v <- c(1,2,3,4,5,6,7,8,"a")
v[9]*2
v[9]*2
v[8]*2
v[1]*2
library(Rserve)
Rserve()
library(Rserve)
Rserve()
df <- iris
library(dplyr)
library(ggplot2)
plotmatrix(df)
library(ggplot2)
plotmatrix(iris[,1:4], colour="gray20")
plotmatrix(iris[,1:4], colour="gray20")
pairs(df)
library(dplyr)
df <- iris
pairs(df)
petal_measures <- cbind(df$petal_width,df$petal_length)
pairs(df, col = df$Species)
petal_measures <- cbind(df$petal_width,df$petal_length)
kmeans(petal_measures,3)
library(dplyr)
df <- iris
pairs(df, col = df$Species)
petal_measures <- cbind(df$petal_width,df$petal_length)
df <- iris
pairs(df, col = df$Species)
petal_measures <- cbind(df$petal_width,df$petal_length)
kmeans(petal_measures,3)
petal_measures <- cbind(df$petal_width,df$petal_length)
petal_measures <- cbind(df$Petal.Width,df$Petal.Length)
kmeans(petal_measures,3)
df <- iris
pairs(df, col = df$Species)
petal_measures <- cbind(df$Petal.Width,df$Petal.Length)
kmeans(petal_measures,3)
install.packages("Rserve")
library(Rserve)
Rserve()
df <- iris
cor(df)
lapply(df, class)
df_numeric <- df[class(df)="numeric"]
df_numeric <- df[class(df)="numeric",]
df_numeric <- df[,class(df)="numeric"]
class(df)="numeric"
lapply(df, is.numeric)
df_numeric <- lapply(df, is.numeric)
df <- iris
df_numeric <- lapply(df, is.numeric)
df_numeric <- lapply(df, is.numeric)
df_numeric <- sapply(df, is.numeric)
df[is.numeric(),]
df[,is.numeric()]
df[,lapply(df, is.numeric)]
df_numeric <- df[,sapply(df, is.numeric)]
View(df_numeric)
df_numeric <- df[,lapply(df, is.numeric)]
View(df_numeric)
df_numeric <- df[,lapply(df, is.numeric)]
cor(df_numeric)
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDatasets.R")
# Set repeatable random seed
set.seed(4)
setwd(choose.dir())
setwd("C:/Users/jjensen/Dropbox/UW - Data Science Cert/1 - Intro to Data Science")
setwd("C:/Users/jjensen/Dropbox/UW - Data Science Cert/1 - Intro to Data Science/assignment_4")
source("CollegeStudentsDatasets.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <- StudentsSplit$trainingData
logitModel <- glm(formula, family = "binomial", data = TrainStudents)
predictedProbabilities <- predict(logitModel, newdata = TestStudents, type = "response")
threshold <- .5
logitPredicted <- ifelse((predictedProbabilities > threshold), "Attend", "Not Attend")
naiveBayesModel <- naiveBayes(formula, data = TrainStudents)
predictedProbabilities <-  predict(naiveBayesModel, newdata = TestStudents, type = "response")
predictedProbabilities <-  predict(naiveBayesModel, newdata = TestStudents)
predictedProbabilities <-  predict(naiveBayesModel, newdata = TestStudents, type = "raw")
View(predictedProbabilities)
predictedProbabilities <- predict(logitModel, newdata = TestStudents, type = "response")
predictedProbabilities <-  predict(naiveBayesModel, newdata = TestStudents, type = "raw")
head(predictedProbabilities)
head(predictedProbabilities["1",])
head(predictedProbabilities[,"1"])
naiveBayesPredicted <- ifelse((predictedProbabilities[,"1"] > threshold), "Attend", "Not Attend")
table(actual, naiveBayesPredicted)
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold = 0.5
table(actual, logitPredicted, dnn = c("ACTUAL","PREDICTED"))
table(actual, naiveBayesPredicted)
table(actual, naiveBayesPredicted, dnn = c("ACTUAL", "PREDICTED"))
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
table(actual, logitPredicted, dnn = c("ACTUAL","PREDICTED"))
### Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
table(actual, naiveBayesPredicted, dnn = c("ACTUAL", "PREDICTED"))
### Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
table(logitPredicted, actual, dnn = c("PREDICTED","ACTUAL"))
### Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
table(naiveBayesPredicted, actual, dnn = c("PREDICTED","ACTUAL"))
nb_confusion <- table(naiveBayesPredicted, actual, dnn = c("PREDICTED","ACTUAL"))
nb_confusion
nb_confusion[1,]
nb_confusion[1,1]
sum(nb_confusion)
(nb_confusion[1,1] + nb_confusion[2,2])
accuracy <- (nb_confusion[1,1] + nb_confusion[2,2]) / sum(nb_confusion)
nb_accuracy <- (nb_confusion[1,1] + nb_confusion[2,2]) / sum(nb_confusion)
# Create logistic regression
logit_model <- glm(formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities <- predict(logit_model, newdata = TestStudents, type = "response")
threshold <- .5
logit_predicted <- ifelse((predictedProbabilities > threshold), "Attend", "Not Attend")
# ClassifyStudents.R
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDatasets.R")
# Set repeatable random seed
set.seed(4)
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDatasets.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <- StudentsSplit$trainingData
logit_model <- glm(formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities <- predict(logit_model, newdata = TestStudents, type = "response")
threshold <- .5
logit_predicted <- ifelse((predictedProbabilities > threshold), "Attend", "Not Attend")
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
nb_model <- naiveBayes(formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
predictedProbabilities <-  predict(nb_model, newdata = TestStudents, type = "raw")
threshold <- .5
nb_predicted <- ifelse((predictedProbabilities[,"1"] > threshold), "Attend", "Not Attend")
# Confusion Matrices
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold = 0.5
### Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
table(logit_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
nb_confusion <- table(nb_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
nb_confusion
nb_accuracy <- (nb_confusion[1,1] + nb_confusion[2,2]) / sum(nb_confusion)
logit_confusion <- table(logit_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
logit_confusion
nb_accuracy
logit_accuracy <- (logit_confusion[1,1] + logit_confusion[2,2]) / sum(logit_confusion)
logit_accuracy
length(nb_predicted)
length(TrainStudents)
nrow(TrainStudents)
nrow(TestStudents)
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <- StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
logit_model <- glm(formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities <- predict(logit_model, newdata = TestStudents, type = "response")
threshold <- .5
logit_predicted <- ifelse((predictedProbabilities > threshold), "Attend", "Not Attend")
###################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
nb_model <- naiveBayes(formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
predictedProbabilities <-  predict(nb_model, newdata = TestStudents, type = "raw")
threshold <- .5
nb_predicted <- ifelse((predictedProbabilities[,"1"] > threshold), "Attend", "Not Attend")
###################################################
# Confusion Matrices
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold = 0.5
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
logit_confusion <- table(logit_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
logit_confusion
logit_accuracy <- (logit_confusion[1,1] + logit_confusion[2,2]) / sum(logit_confusion)
logit_accuracy
### Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
nb_confusion <- table(nb_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
nb_confusion
nb_accuracy <- (nb_confusion[1,1] + nb_confusion[2,2]) / sum(nb_confusion)
nb_accuracy
x <- 1:100
quantile(x, probs = .1)
x <- 0:100
quantile(x, probs = .1)
quantile(x, probs = .4)
quantile(x, probs = .8)
dataSet <- Students
fractionOfTest = 0.3
randomVector <- runif(nrow(dataSet))
quantile(randomVector, probs = fractionOfTest)
(randomVector <= exactThreshold)
exactThreshold <- quantile(randomVector, probs = fractionOfTest)
(randomVector <= exactThreshold)
testFlag <- (randomVector <= exactThreshold)
testingData <- dataSet[testFlag,]
trainingData <- dataSet[!testFlag,]
7200 * .3
7200 * .7
dataSetSplit <- list(trainingData = trainingData, testingData = testingData)
# ClassifyStudents.R
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDatasets.R")
set.seed(4)
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <- StudentsSplit$trainingData
threshold <- .5
# Create logistic regression
logit_model <- glm(formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities <- predict(logit_model, newdata = TestStudents, type = "response")
logit_predicted <- ifelse((predictedProbabilities > threshold), "Attend", "Not Attend")
###################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
nb_model <- naiveBayes(formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
predictedProbabilities <-  predict(nb_model, newdata = TestStudents, type = "raw")
nb_predicted <- ifelse((predictedProbabilities[,"1"] > threshold), "Attend", "Not Attend")
###################################################
# Confusion Matrices
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
### Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
logit_confusion <- table(logit_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
logit_confusion
logit_accuracy <- (logit_confusion[1,1] + logit_confusion[2,2]) / sum(logit_confusion)
logit_accuracy
### Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
nb_confusion <- table(nb_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
nb_confusion
nb_accuracy <- (nb_confusion[1,1] + nb_confusion[2,2]) / sum(nb_confusion)
nb_accuracy
### declare threshold
threshold <- .7
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
logit_model <- glm(formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities <- predict(logit_model, newdata = TestStudents, type = "response")
logit_predicted <- ifelse((predictedProbabilities > threshold), "Attend", "Not Attend")
###################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
nb_model <- naiveBayes(formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
predictedProbabilities <-  predict(nb_model, newdata = TestStudents, type = "raw")
nb_predicted <- ifelse((predictedProbabilities[,"1"] > threshold), "Attend", "Not Attend")
###################################################
# Confusion Matrices
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
### Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
logit_confusion <- table(logit_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
logit_confusion
logit_accuracy <- (logit_confusion[1,1] + logit_confusion[2,2]) / sum(logit_confusion)
logit_accuracy
### Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
nb_confusion <- table(nb_predicted, actual, dnn = c("PREDICTED","ACTUAL"))
nb_confusion
nb_accuracy <- (nb_confusion[1,1] + nb_confusion[2,2]) / sum(nb_confusion)
nb_accuracy
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
# Load the data
fileName="CollegePlans.csv"
DATAFRAME<-read.csv(file=fileName, stringsAsFactors=F)
View(DATAFRAME)
source('C:/Users/jjensen/Dropbox/UW - Data Science Cert/1 - Intro to Data Science/assignment_4/Elbow.R', echo=TRUE)
source('C:/Users/jjensen/Dropbox/UW - Data Science Cert/1 - Intro to Data Science/assignment_4/Elbow.R', echo=TRUE)
source('C:/Users/jjensen/Dropbox/UW - Data Science Cert/1 - Intro to Data Science/assignment_4/Elbow.R', echo=TRUE)
source('C:/Users/jjensen/Dropbox/UW - Data Science Cert/1 - Intro to Data Science/assignment_4/Elbow.R', echo=TRUE)
View(CentersDf)
source('C:/Users/jjensen/Dropbox/UW - Data Science Cert/1 - Intro to Data Science/assignment_4/Elbow.R', echo=TRUE)
